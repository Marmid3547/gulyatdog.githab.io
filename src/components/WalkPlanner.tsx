
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Calendar } from '@/components/ui/calendar';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

const WalkPlanner = () => {
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());
  const [walkData, setWalkData] = useState({
    title: '',
    time: '',
    duration: '60',
    location: '',
    maxParticipants: '4',
    description: ''
  });

  const plannedWalks = [
    {
      id: 1,
      title: '–£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–≥—É–ª–∫–∞ –≤ –°–æ–∫–æ–ª—å–Ω–∏–∫–∞—Ö',
      date: '2024-05-30',
      time: '08:00',
      duration: '90 –º–∏–Ω',
      location: '–ü–∞—Ä–∫ –°–æ–∫–æ–ª—å–Ω–∏–∫–∏',
      participants: 3,
      maxParticipants: 5,
      organizer: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
      status: 'active'
    },
    {
      id: 2,
      title: '–í–µ—á–µ—Ä–Ω—è—è —Å–æ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±–∞–∫',
      date: '2024-05-31',
      time: '19:00',
      duration: '60 –º–∏–Ω',
      location: '–ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã',
      participants: 2,
      maxParticipants: 4,
      organizer: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
      status: 'active'
    },
    {
      id: 3,
      title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª—É—à–∞–Ω–∏—è',
      date: '2024-06-01',
      time: '10:00',
      duration: '120 –º–∏–Ω',
      location: '–ò–∑–º–∞–π–ª–æ–≤—Å–∫–∏–π –ø–∞—Ä–∫',
      participants: 4,
      maxParticipants: 4,
      organizer: '–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤',
      status: 'full'
    }
  ];

  const handleCreateWalk = () => {
    console.log('Creating walk:', { ...walkData, date: selectedDate });
  };

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-6">
      <div className="grid lg:grid-cols-3 gap-6">
        {/* –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏ */}
        <div className="lg:col-span-1">
          <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-xl">
            <CardHeader className="bg-gradient-to-r from-green-500 to-blue-500 text-white rounded-t-lg">
              <CardTitle className="text-xl">–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É</CardTitle>
            </CardHeader>
            <CardContent className="p-6 space-y-4">
              <div>
                <Label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ</Label>
                <Input
                  id="title"
                  value={walkData.title}
                  onChange={(e) => setWalkData(prev => ({ ...prev, title: e.target.value }))}
                  placeholder="–£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–≥—É–ª–∫–∞..."
                  className="rounded-full"
                />
              </div>
              
              <div>
                <Label>–î–∞—Ç–∞</Label>
                <Calendar
                  mode="single"
                  selected={selectedDate}
                  onSelect={setSelectedDate}
                  className="rounded-md border bg-white"
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="time">–í—Ä–µ–º—è</Label>
                  <Input
                    id="time"
                    type="time"
                    value={walkData.time}
                    onChange={(e) => setWalkData(prev => ({ ...prev, time: e.target.value }))}
                    className="rounded-full"
                  />
                </div>
                <div>
                  <Label htmlFor="duration">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</Label>
                  <Select value={walkData.duration} onValueChange={(value) => setWalkData(prev => ({ ...prev, duration: value }))}>
                    <SelectTrigger className="rounded-full">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="30">30 –º–∏–Ω</SelectItem>
                      <SelectItem value="60">60 –º–∏–Ω</SelectItem>
                      <SelectItem value="90">90 –º–∏–Ω</SelectItem>
                      <SelectItem value="120">120 –º–∏–Ω</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              
              <div>
                <Label htmlFor="location">–ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏</Label>
                <Input
                  id="location"
                  value={walkData.location}
                  onChange={(e) => setWalkData(prev => ({ ...prev, location: e.target.value }))}
                  placeholder="–ü–∞—Ä–∫ –°–æ–∫–æ–ª—å–Ω–∏–∫–∏..."
                  className="rounded-full"
                />
              </div>
              
              <div>
                <Label htmlFor="maxParticipants">–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</Label>
                <Select value={walkData.maxParticipants} onValueChange={(value) => setWalkData(prev => ({ ...prev, maxParticipants: value }))}>
                  <SelectTrigger className="rounded-full">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="2">2 —É—á–∞—Å—Ç–Ω–∏–∫–∞</SelectItem>
                    <SelectItem value="3">3 —É—á–∞—Å—Ç–Ω–∏–∫–∞</SelectItem>
                    <SelectItem value="4">4 —É—á–∞—Å—Ç–Ω–∏–∫–∞</SelectItem>
                    <SelectItem value="5">5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</SelectItem>
                    <SelectItem value="6">6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Input
                  id="description"
                  value={walkData.description}
                  onChange={(e) => setWalkData(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏..."
                  className="rounded-full"
                />
              </div>
              
              <Button 
                onClick={handleCreateWalk}
                className="w-full bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white rounded-full"
              >
                –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ */}
        <div className="lg:col-span-2">
          <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-xl">
            <CardHeader>
              <CardTitle className="text-2xl bg-gradient-to-r from-blue-500 to-purple-500 bg-clip-text text-transparent">
                –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {plannedWalks.map((walk) => (
                <div
                  key={walk.id}
                  className="p-6 rounded-xl border-2 border-gray-200 hover:border-gray-300 hover:shadow-lg transition-all duration-300"
                >
                  <div className="flex items-start justify-between mb-4">
                    <div>
                      <h3 className="text-lg font-semibold text-gray-800">{walk.title}</h3>
                      <p className="text-gray-600">–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {walk.organizer}</p>
                    </div>
                    <Badge 
                      className={
                        walk.status === 'active' 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }
                    >
                      {walk.status === 'active' ? '–î–æ—Å—Ç—É–ø–Ω–æ' : '–ó–∞–ø–æ–ª–Ω–µ–Ω–æ'}
                    </Badge>
                  </div>
                  
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4 text-sm">
                    <div>
                      <span className="text-gray-500">üìÖ –î–∞—Ç–∞:</span>
                      <p className="font-medium">{walk.date}</p>
                    </div>
                    <div>
                      <span className="text-gray-500">‚è∞ –í—Ä–µ–º—è:</span>
                      <p className="font-medium">{walk.time}</p>
                    </div>
                    <div>
                      <span className="text-gray-500">‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                      <p className="font-medium">{walk.duration}</p>
                    </div>
                    <div>
                      <span className="text-gray-500">üìç –ú–µ—Å—Ç–æ:</span>
                      <p className="font-medium">{walk.location}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm text-gray-600">
                        –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {walk.participants}/{walk.maxParticipants}
                      </span>
                      <div className="flex -space-x-2">
                        {[...Array(walk.participants)].map((_, i) => (
                          <div key={i} className="w-8 h-8 bg-gradient-to-r from-orange-400 to-blue-400 rounded-full border-2 border-white flex items-center justify-center text-white text-xs">
                            üêï
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    <div className="space-x-2">
                      {walk.status === 'active' ? (
                        <Button 
                          size="sm" 
                          className="bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white rounded-full"
                        >
                          –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
                        </Button>
                      ) : (
                        <Button size="sm" variant="outline" disabled className="rounded-full">
                          –ú–µ—Å—Ç–æ –∑–∞–Ω—è—Ç–æ
                        </Button>
                      )}
                      <Button size="sm" variant="outline" className="rounded-full">
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </div>
      </div>
      
      {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã */}
      <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-xl">
        <CardHeader>
          <CardTitle className="text-xl bg-gradient-to-r from-purple-500 to-blue-500 bg-clip-text text-transparent">
            –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-3 gap-4">
            {[
              { name: '–°–æ–∫–æ–ª—å–Ω–∏–∫–∏ - –ë–æ–ª—å—à–æ–π –∫—Ä—É–≥', distance: '3.5 –∫–º', difficulty: '–õ–µ–≥–∫–∏–π', time: '45 –º–∏–Ω' },
              { name: '–ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã - –ê–ª–ª–µ—è', distance: '2.1 –∫–º', difficulty: '–õ–µ–≥–∫–∏–π', time: '30 –º–∏–Ω' },
              { name: '–ò–∑–º–∞–π–ª–æ–≤—Å–∫–∏–π - –õ–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∞', distance: '4.8 –∫–º', difficulty: '–°—Ä–µ–¥–Ω–∏–π', time: '60 –º–∏–Ω' }
            ].map((route, index) => (
              <div key={index} className="p-4 rounded-xl bg-gradient-to-br from-gray-50 to-gray-100 hover:shadow-md transition-all duration-300">
                <h4 className="font-semibold text-gray-800 mb-2">{route.name}</h4>
                <div className="space-y-1 text-sm text-gray-600">
                  <p>üìè {route.distance}</p>
                  <p>‚≠ê {route.difficulty}</p>
                  <p>‚è±Ô∏è {route.time}</p>
                </div>
                <Button size="sm" variant="outline" className="w-full mt-3 rounded-full">
                  –í—ã–±—Ä–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç
                </Button>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default WalkPlanner;
